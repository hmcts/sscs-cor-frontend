#!groovy

properties([
        pipelineTriggers([cron('H 08 * * 1-5')]),
        parameters([
                string(name: 'URL_TO_TEST', defaultValue: 'https://sscs-cor.aat.platform.hmcts.net', description: 'The URL you want to run these tests against'),
                string(name: 'TRIBUNALS_API_URI', defaultValue: 'http://sscs-tribunals-api-aat.service.core-compute-aat.internal', description: 'Tribunal URL to create test data'),
                string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net', description: 'Idam URL you want to create test account'),
                string(name: 'SecurityRules',
                 defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
                 description: 'The URL you want to run these tests against'),
                string(name: 'ZAP_URL_EXCLUSIONS', defaultValue: "-config globalexcludeurl.url_list.url(0).regex='.*ruxitagentjs_.*'")
        ])
])

@Library("Infrastructure")

def product = "sscs-cor"
def component = "frontend"
def urlExclusions = params.ZAP_URL_EXCLUSIONS

def secrets = [
  'sscs-${env}': [
        secret('sscs-s2s-secret', 'S2S_SECRET'),
        secret('sscs-cor-idam-client-secret-test', 'IDAM_CLIENT_SECRET_TEST'),
        secret('sscs-cor-idam-client-secret', 'IDAM_CLIENT_SECRET_AAT'),
        secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
        secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD'),
        secret('idam-sscs-oauth2-client-secret', 'IDAM_OAUTH2_CLIENT_SECRET')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

withNightlyPipeline("nodejs", product, component) {
    loadVaultSecrets(secrets)
    env.TEST_URL = params.URL_TO_TEST
    env.TRIBUNALS_API_URL = params.TRIBUNALS_API_URI
    env.IDAM_API_URL = params.IDAM_API_URL

    // before('DependencyCheckNightly') {sh 'yarn test : audit'}
    enableSecurityScan(
            urlExclusions: urlExclusions,
            scanType: "frontend"
    )
    // enableFortifyScan('sscs-aat')
    enableCrossBrowserTest()
    enableFullFunctionalTest(20)
    enableSlackNotifications('#sscs-tech')
    enableMutationTest()

    // after('fortify-scan') {
    //     steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    // }

    afterSuccess('crossBrowserTest') {
       steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'functional-output/**/*'
    }

    afterSuccess('fullFunctionalTest') {

        publishHTML target: [
                allowMissing : true,
                alwaysLinkToLastBuild: true,
                keepAll : true,
                reportDir : "output",
                reportFiles : "SSCS-e2e-result.html",
                reportName : "SSCS E2E functional tests result"
        ]
    }
}
