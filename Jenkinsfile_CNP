#!groovy
properties(
        [[$class: 'GithubProjectProperty', projectUrlStr: 'https://github.com/hmcts/sscs-cor-frontend'],
         pipelineTriggers([[$class: 'GitHubPushTrigger']])]
)

@Library("Infrastructure")

def product = "sscs-cor"
def component = "frontend"

def cohUrlAat = "http://coh-cor-aat.service.core-compute-aat.internal"
def sscsCorBackEndUrlAat = "http://sscs-tribunals-api-aat.service.core-compute-aat.internal"
def idamUrlAat = "https://idam-web-public.aat.platform.hmcts.net"
def idamApiUrlAat = "https://idam-api.aat.platform.hmcts.net"
def s2sUrlAat = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
def httpProxy =  "http://proxyout.reform.hmcts.net:8080"

def secrets = [
        'sscs-${env}': [
                secret('sscs-s2s-secret', 'S2S_SECRET'),
                secret('idam-sscs-oauth2-client-secret', 'IDAM_CLIENT_SECRET'),
                secret('idam-sscs-systemupdate-user', 'IDAM_SSCS_SYSTEMUPDATE_USER'),
                secret('idam-sscs-systemupdate-password', 'IDAM_SSCS_SYSTEMUPDATE_PASSWORD')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)

withPipeline("nodejs", product, component) {
    loadVaultSecrets(secrets)
    after('checkout') {yarnBuilder.yarn('cache clean')}
    after('build') {yarnBuilder.yarn('build')}
    enableAksStagingDeployment()
    disableLegacyDeployment()
    before('securitychecks') { yarnBuilder.yarn('test:audit') }

    before("functionalTest:preview") {
        env.COH_URL = cohUrlAat
        sh 'echo COH_URL=$COH_URL'
        env.SSCS_API_URL = sscsCorBackEndUrlAat
        sh 'echo SSCS_API_URL=$SSCS_API_URL'
        env.IDAM_URL = idamUrlAat
        sh 'echo IDAM_URL=$IDAM_URL'
        env.IDAM_API_URL = idamApiUrlAat
        sh 'echo IDAM_API_URL=$IDAM_API_URL'
        env.HTTP_PROXY = httpProxy
        sh 'echo HTTP_PROXY=$HTTP_PROXY'
        env.S2S_URL = s2sUrlAat
        sh 'echo S2S_URL=$S2S_URL'
        env.S2S_OAUTH2_URL = "https://idam-api.aat.platform.hmcts.net"
        sh 'echo S2S_OAUTH2_URL=$S2S_OAUTH2_URL'
    }
    after("functionalTest:preview") {
        env.HTTP_PROXY = ""
        sh 'echo HTTP_PROXY=$HTTP_PROXY'
    }
    before("functionalTest:aat") {
        env.COH_URL = cohUrlAat
        sh 'echo COH_URL=$COH_URL'
        env.SSCS_API_URL = sscsCorBackEndUrlAat
        sh 'echo SSCS_API_URL=$SSCS_API_URL'
        env.IDAM_URL = idamUrlAat
        sh 'echo IDAM_URL=$IDAM_URL'
        env.IDAM_API_URL = idamApiUrlAat
        sh 'echo IDAM_API_URL=$IDAM_API_URL'
        env.HTTP_PROXY = httpProxy
        sh 'echo HTTP_PROXY=$HTTP_PROXY'
        env.S2S_URL = s2sUrlAat
        sh 'echo S2S_URL=$S2S_URL'
        env.S2S_OAUTH2_URL = "https://idam-api.aat.platform.hmcts.net"
        sh 'echo S2S_OAUTH2_URL=$S2S_OAUTH2_URL'
    }
    after("functionalTest:aat") {
        env.HTTP_PROXY = ""
        sh 'echo HTTP_PROXY=$HTTP_PROXY'
    }
}
